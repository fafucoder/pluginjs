---
title: Svg Progress
layout: plugin
styles:
- ../../plugins/svg-progress/css/svg-progress.css
scripts:
- ../../plugins/svg-progress/svg-progress.js
---
<style>
.pj-svgProgress {
  width: 160px;
  margin: 10px auto;
}

@media all and (max-width: 768px) {
  .pj-svgProgress {
    width: 80%;
    max-width: 300px;
  }
}
</style>

<div class="top-gap">
  <button class="btn api-init">init</button>
  <button class="btn api-destroy">destroy</button>
  <button class="btn api-enable">enable</button>
  <button class="btn api-disable">disable</button>
</div>
<div class="top-gap">
  <button class="btn api-get">get()</button>
  <button class="btn api-start">start()</button>
  <button class="btn api-stop">stop()</button>
  <button class="btn api-go">go('50')</button>
  <button class="btn api-go_percentage">go('50%')</button>
  <button class="btn api-finish">finish()</button>
  <button class="btn api-reset">reset()</button>
</div>
<div class="console"></div>
<h2>Shape</h2>
<div class="pj-svgProgress-circle" role="progressbar" data-goal="100" aria-valuemin="0" aria-valuemax="100">
  <span class="pj-svgProgress-number">0%</span>
</div>

<div class="pj-svgProgress-rectangle" role="progressbar" data-goal="100" aria-valuemin="0" aria-valuemax="100">
  <span class="pj-svgProgress-number">0%</span>
</div>

<div class="pj-svgProgress-semicircle" role="progressbar" data-goal="100" aria-valuemin="0" aria-valuemax="100">
  <span class="pj-svgProgress-number">0%</span>
</div>

<div class="pj-svgProgress-triangle" role="progressbar" data-goal="100" aria-valuemin="0" aria-valuemax="100">
  <span class="pj-svgProgress-number">0%</span>
</div>

<div class="pj-svgProgress-pentagon" role="progressbar" data-goal="100" aria-valuemin="0" aria-valuemax="100">
  <span class="pj-svgProgress-number">0%</span>
</div>

<div class="pj-svgProgress-hexagon" role="progressbar" data-goal="100" aria-valuemin="0" aria-valuemax="100">
  <span class="pj-svgProgress-number">0%</span>
</div>

<h2>API</h2>
 <div class="pj-svgProgress" role="progressbar" data-goal="33">
  <div class="pj-svgProgress-content">
    <div class="pj-svgProgress-number">0%</div>
    <div class="pj-svgProgress-label">New Clients</div>
  </div>
</div>

<div class="pj-svgProgress" role="progressbar" data-goal="-50" data-barcolor="#3daf2c" data-barsize="10" aria-valuemin="-100" aria-valuemax="100">
  <div class="pj-svgProgress-content">Hello world</div>
</div>

 <div class="pj-svgProgress--slow" role="progressbar">
  <span class="pj-svgProgress-number">0%</span>
</div>
<div class="pj-svgProgress--countdown" role="progressbar">
  <span class="pj-svgProgress-number">2: 00</span>
</div>

<h2>Creation countdown</h2>
<div class="pj-svgProgress--creation-countdown countdown-hour" role="progressbar" data-shape="circle">
  <span class="pj-svgProgress-number">0</span>
</div>
<div class="pj-svgProgress--creation-countdown countdown-min" role="progressbar" data-shape="circle">
  <span class="pj-svgProgress-number">0</span>
</div>
<div class="pj-svgProgress--creation-countdown countdown-sec" role="progressbar" data-shape="circle">
  <span class="pj-svgProgress-number">0</span>
</div>
<script>
  const time = new Date()
  const hour = time.getHours()
  const min = time.getMinutes()
  const sec = time.getSeconds()
  let minLock = true
  let hourLock = true
  const hourInstance = Pj.svgProgress('.countdown-hour', {
    first: 60,
    goal: 0,
    max: 60,
    numberCallback: function(n) {
      let hour = this.now % 24;
      if (hour < 10) {
        hour = '0' + hour;
      }
      return hour;
    }
  })
  const minInstance = Pj.svgProgress('.countdown-min', {
    first: 60,
    goal: 0,
    max: 60,
    numberCallback: function(n) {
      let min = this.now % 60;
      if (!min && !hourLock) {
        hourLock = true
        hourInstance.go(hourInstance.get() - 1)
        this.first = 60
        this.reset()
      }
      if (min < 10) {
        min = '0' + min;
      }
      hourLock = false
      return min;
    }
  })
  const secInstance = Pj.svgProgress('.countdown-sec', {
    easing: 'linear',
    first: sec,
    max: 60,
    goal: 0,
    speed: 600, // 120 s * 1000 ms per s / 100
    numberCallback: function(n) {
      let seconds = this.now % 60;
      if (!seconds && !minLock) {
        minLock = true
        minInstance.go(minInstance.get() - 1)
        this.first = 60
        this.reset()
      }
      console.log(n)
      if (n[0] === 0) {
        setTimeout(() => this.start(), 1000)
      }
      if (seconds < 10) {
        seconds = '0' + seconds;
      }
      minLock = false
      return seconds;
    }
  })
  console.log([hour, min, sec])
  hourInstance.start()
  hourInstance.go(hour)
  minInstance.start()
  minInstance.go(min)
  secInstance.start()
</script>
<script>
(function(){
  var events = ['ready', 'enable', 'disable', 'destroy', 'start', 'go', 'reset', 'stop', 'finish'];

  for(var i = 0; i < events.length; i++) {
   document.querySelector('.pj-svgProgress-circle').addEventListener('svg-progress:'+events[i], function(event, instance) {
     console.log(event.type, 'event');
   });
  }
  var $element = Pj.svgProgress('.pj-svgProgress', {
    shape: 'circle',
  });
  var $circle = Pj.svgProgress('.pj-svgProgress-circle', {
    shape: 'circle',
    onUpdate: function(val) {
      console.log('update: '+JSON.stringify(val), 'event');
    },
  });
  var $rectangle = Pj.svgProgress('.pj-svgProgress-rectangle', {
    shape: 'rectangle'
  });
  var $semicircle = Pj.svgProgress('.pj-svgProgress-semicircle', {
    shape: 'semicircle'
  });
  var $triangle = Pj.svgProgress('.pj-svgProgress-triangle', {
    shape: 'triangle'
  });
  var $pentagon = Pj.svgProgress('.pj-svgProgress-pentagon', {
    shape: 'pentagon'
  });
  var $hexagon = Pj.svgProgress('.pj-svgProgress-hexagon', {
    shape: 'hexagon'
  });
  // Example with grater loading time - loads longer
  var $slow = Pj.svgProgress('.pj-svgProgress--slow', {
    shape: 'circle',
    goal: 1000,
    min: 0,
    max: 1000,
    speed: 200,
    easing: 'linear'
  });
  // Example with grater loading time - loads longer
  var $cuntdown = Pj.svgProgress('.pj-svgProgress--countdown', {
    shape: 'circle',
    easing: 'linear',
    first: 120,
    max: 120,
    goal: 0,
    speed: 1200, // 120 s * 1000 ms per s / 100
    numberCallback: function(n) {
      var minutes = Math.floor(this.now / 60);
      var seconds = this.now % 60;
      if (seconds < 10) {
        seconds = '0' + seconds;
      }
      return minutes + ': ' + seconds;
    }
  });

  document.querySelector('.api-init').addEventListener('click', function() {

  });

  document.querySelector('.api-destroy').addEventListener('click', function() {
    console.info('destroy');
    $element.map(plugin => plugin.destroy());
    $circle.destroy();
    $rectangle.destroy();
    $semicircle.destroy();
    $triangle.destroy();
    $slow.destroy();
    $cuntdown.destroy();
    $pentagon.destroy();
    $hexagon.destroy();
  });

  document.querySelector('.api-enable').addEventListener('click', function() {
    console.info('enable');
    $circle.enable();
    $rectangle.enable();
    $semicircle.enable();
    $triangle.enable();
    $slow.enable();
    $cuntdown.enable();
    $element.map(plugin => plugin.enable());
    $pentagon.enable();
    $hexagon.enable();
  });

  document.querySelector('.api-disable').addEventListener('click', function() {
    console.info('disable');
    $circle.disable();
    $rectangle.disable();
    $semicircle.disable();
    $triangle.disable();
    $slow.disable();
    $cuntdown.disable();
    $element.map(plugin => plugin.disable());
    $pentagon.disable();
    $hexagon.disable();
  });

  document.querySelector('.api-start').addEventListener('click', function() {
    console.info('start');
    $circle.start();
    $rectangle.start();
    $semicircle.start();
    $triangle.start();
    $slow.start();
    $cuntdown.start();
    $element.map(plugin => plugin.start());
    $pentagon.start();
    $hexagon.start();
  });

  document.querySelector('.api-finish').addEventListener('click', function() {
    console.info('finish');
    $circle.finish();
    $rectangle.finish();
    $semicircle.finish();
    $triangle.finish();
    $slow.finish();
    $cuntdown.finish();
    $element.map(plugin => plugin.finish());
    $pentagon.finish();
    $hexagon.finish();
  });

  document.querySelector('.api-get').addEventListener('click', function() {
    console.info('get');
    console.info($element.map(plugin => plugin.get()));
    console.info($slow.get());
    console.info($cuntdown.get());
  });

  document.querySelector('.api-go').addEventListener('click', function() {
    console.info('go');
    $circle.go(50);
    $rectangle.go(50);
    $semicircle.go(50);
    $triangle.go(50);
    $slow.go(50);
    $cuntdown.go(50);
    $element.map(plugin => plugin.go(50));
    $pentagon.go(50);
    $hexagon.go(50);
  });

  document.querySelector('.api-go_percentage').addEventListener('click', function() {
    console.info('go');
    $circle.go('50%');
    $rectangle.go('50%');
    $semicircle.go('50%');
    $triangle.go('50%');
    $slow.go('50%');
    $cuntdown.go('50%');
    $element.map(plugin => plugin.go('50%'));
    $pentagon.go('50%');
    $hexagon.go('50%');
  });

  document.querySelector('.api-stop').addEventListener('click', function() {
    console.info('stop');
    $circle.stop();
    $rectangle.stop();
    $semicircle.stop();
    $triangle.stop();
    $slow.stop();
    $cuntdown.stop();
    $element.map(plugin => plugin.stop());
    $pentagon.stop();
    $hexagon.stop();
  });

  document.querySelector('.api-reset').addEventListener('click', function() {
    console.info('reset');
    $circle.reset();
    $rectangle.reset();
    $semicircle.reset();
    $triangle.reset();
    $slow.reset();
    $cuntdown.reset();
    $element.map(plugin => plugin.reset());
    $pentagon.reset();
    $hexagon.reset();
  });
})();
</script>
