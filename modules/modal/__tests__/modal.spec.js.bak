import jsdom from 'mocha-jsdom';
;
import Modal from '../../src/main';
import { defaults as DEFAULTS } from '../../src/constant';

describe('Modal', () => {
  describe('Modal()', () => {
    it('should have Modal', () => {
      expect(Modal).to.be.an('function');
    });

    it('should have defaults', () => {
      expect(Modal.defaults).to.be.an('object');
    });
    it('should have events', () => {
      expect(Modal.events).to.be.an('object');
    });
    it('should have classes', () => {
      expect(Modal.classes).to.be.an('object');
    });
  });

  describe('constructor()', () => {
    it('should work with element', () => {
      let element = document.createElement('div');
      document.body.appendChild(element)
      let modal = new Modal(element);

      expect(modal).to.be.an('object');
      expect(modal.options).to.be.eql(DEFAULTS);
    });

    it('should have options', () => {
      let element = document.createElement('div');
      let modal = new Modal(element);

      expect(modal.options).to.be.an('object');
    });
  });

  describe('jquery constructor', () => {
    it('should works with jquery fn', () => {
      let element = document.createElement('div');
      let $element = $(element);

      expect($element.asModal()).to.be.equal($element);

      let api = $element.data('modal');

      expect(api).to.be.an('object');
      expect(api.options).to.be.an('object');
    });
  });

  describe('api call', () => {
    it('should not call bind', () => {
      let $element = $(document.createElement('div')).asModal();
      expect($element.asModal('bind')).to.be.undefined;
    });

    it('should call destroy', () => {
      let $element = $(document.createElement('div')).asModal();
      $element.asModal('destroy');
      // expect().to.be.equal($element);
      // expect($element).to.be.equal($element);
    });
  });

  describe('initialize()', () => {
    let $element;

    beforeEach(function() {
      $element = $(document.createElement('div'));
    });

    it('should trigger ready event', () => {
      let called = 0;

      $element.on('modal:ready', function(event, api) {
        expect(api.is('initialized')).to.be.true;
        called++;
      });

      $element.asModal();
      expect(called).to.be.equal(1);
    });
  });

  describe('destroy()', () => {
    let $element;
    let api;

    beforeEach(function() {
      $element = $(document.createElement('div')).asModal();
      api = $element.data('modal');
    });

    it('should trigger destroy event', () => {
      let called = 0;

      $element.on('modal:destroy', function(event, api) {
        expect(api.is('initialized')).to.be.false;
        called++;
      });

      $element.asModal('destroy');

      expect(called).to.be.equal(1);
    });
  });

  describe('enable()', () => {
    let $element;
    let api;

    beforeEach(function() {
      $element = $(document.createElement('div')).asModal();
      api = $element.data('modal');
    });

    it('should enable the plugin', () => {
      $element.asModal('disable');
      $element.asModal('enable');

      expect(api.is('disabled')).to.be.false;
    });

    it('should trigger enable event', () => {
      let called = 0;

      $element.on('modal:enable', function(event, api) {
        expect(api.is('disabled')).to.be.false;
        called++;
      });

      $element.asModal('enable');
      expect(called).to.be.equal(1);
    });
  });

  describe('disable()', () => {
    let $element;
    let api;

    beforeEach(function() {
      $element = $(document.createElement('div')).asModal();
      api = $element.data('modal');
    });

    it('should disable the plugin', () => {
      $element.asModal('disable');

      expect(api.is('disabled')).to.be.true;
    });

    it('should trigger disable event', () => {
      let called = 0;

      $element.on('modal:disable', function(event, api) {
        expect(api.is('disabled')).to.be.true;
        called++;
      });

      $element.asModal('disable');
      expect(called).to.be.equal(1);
    });
  });
});
